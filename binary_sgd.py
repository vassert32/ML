# -*- coding: utf-8 -*-
"""binary_sgd.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1noCU6byGMKVjGfuUsyvt-3TtHnxsw4pT
"""

import numpy as np
import matplotlib.pyplot as plt

# сигмаоидная функция потерь
def loss(w, x, y):
    M = np.dot(w, x) * y        # отступ (Margin)
    return 2 / (1 + np.exp(M))  # сигмоида

# производная сигмоидной функции
def df(w, x, y):
    M = np.dot(w, x) * y                                        # отступ (Margin)
    return -2 * (1 + np.exp(M)) ** (-2) * np.exp(M) * x * y     # происзодная сигмоиды

# выборка с тремя признаками (третий - const = +1)
x_train = [[10, 50], [20, 30], [25, 30], [20, 60], [15, 70], [40, 40], [30, 45], [20, 45], [40, 30], [7, 35]]
x_train = [x + [1] for x in x_train]    # единица будет оперделять смещение по оси координат
x_train = np.array(x_train)
y_train = np.array([-1, 1, 1, -1, -1, 1, 1, -1, 1, -1])

# constatnts
n_train = len(x_train)              # размер обучающей выборки
w = [float(i) for i in [0, 0, 0]]   # начальные весовые коэффиценты
nt = 0.0005                         # шаг сходимости SDG
lm = 0.01                           # скорость "забывания" (лямба для пересчета Q)
N = 500                             # количсетво итераций SGD

# показатель качества по формуле
Q = np.mean([loss(w, x, y) for x, y in zip(x_train, y_train)])  # показатель качества
Q_plot = [Q] # график изменения показателя качества

for i in range(N):
    k = np.random.randint(0, n_train - 1)       # случайный индекс выборки
    ek = loss(w, x_train[k], y_train[k])        # вычисление потерь для выбранного случайно вектора
    w = w - nt * df(w, x_train[k], y_train[k])  # корректировка весов по SGD (формула)
    Q = lm * ek + (1 - lm) * Q                  # пересчет показателя качества (формула)
    Q_plot.append(Q)                            # добавляем значение для графика

print(w)
print(Q_plot)

# построение графика
line_x = list(range(max(x_train[:, 0])))  # формирование графика разделяющей линии
line_y = [-x * w[0] / w[1] - w[2] / w[1] for x in line_x]

x_0 = x_train[y_train == 1]  # формирование точек для 1-го
x_1 = x_train[y_train == -1]  # и 2-го классов

plt.scatter(x_0[:, 0], x_0[:, 1], color='red')
plt.scatter(x_1[:, 0], x_1[:, 1], color='blue')
plt.plot(line_x, line_y, color='green')

plt.xlim([0, 45])
plt.ylim([0, 75])
plt.ylabel("длина")
plt.xlabel("ширина")
plt.grid(True)
plt.show()